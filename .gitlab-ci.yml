include:
  - local: 'ci/setup-dkml/gl/setup-dkml.gitlab-ci.yml'

stages:
  - prepare
  - build
  - test
  - deploy

variables:
  # We need the secondary switch ('two') to install dkml-build-desktop.opam
  SECONDARY_SWITCH: 'true'
  # Set to 'true' when you only want do the DKML setup but not the build-test
  # and not the release. Good for populating the cache.
  SETUP_ONLY: 'false'
  SKIP_CHANNEL_RELEASE_HOST_WIN32: 'false'
  SKIP_CHANNEL_RELEASE: 'false'
  SKIP_FLAVOR_FULL: 'false'

.release:
  variables:
    DKML_CHANNEL: release
    # All the following are checked by test/gitlab/check_gitlab_ci.exe so that
    # they match the RELEASED VERSION of dkml-runtime-distribution set in
    # `dkml-build-desktop.opam`
    PIN_DUNE: '2.9.3+shim.1.0.2~r0'
    PIN_OCAMLFIND: '1.9.1'
    PIN_DKML_APPS: '1.0.1'
    PIN_WITH_DKML: '1.0.1'

.next:
  variables:
    DKML_CHANNEL: next
    # Use the latest diskuv opam repository
    DISKUV_OPAM_REPOSITORY: main
    # All the following are checked by test/gitlab/check_gitlab_ci.exe so that
    # they match the TRUNK of dkml-runtime-distribution
    PIN_DUNE: '2.9.3+shim.1.0.2~r0'
    PIN_OCAMLFIND: '1.9.1'
    PIN_DKML_APPS: '1.0.2~prerel7'
    PIN_WITH_DKML: '1.0.2~prerel7'

linux:ci:release:build:
  extends:
    - .linux:setup-dkml
    - .release
  stage: build
  needs: [] # see comments in win32:ci:release:build
  timeout: 2h
  rules:
    - if: $SKIP_CHANNEL_RELEASE != "true" && $SETUP_ONLY != "true"
  script:
    - sh ci/build-test.sh ci release

linux:ci:next:build:
  extends:
    - .linux:setup-dkml
    - .next
  stage: build
  needs: [] # see comments in win32:ci:release:build
  timeout: 2h
  rules:
    - if: $SETUP_ONLY != "true"
  script:
    - sh ci/build-test.sh ci next

linux:full:release:build:
  extends:
    - .linux:setup-dkml
    - .release
  stage: build
  needs: [] # see comments in win32:ci:release:build
  timeout: 2h
  rules:
    - if: $SKIP_CHANNEL_RELEASE != "true" && $SKIP_FLAVOR_FULL != "true" && $SETUP_ONLY != "true"
  script:
    - sh ci/build-test.sh full release

linux:full:next:build:
  extends:
    - .linux:setup-dkml
    - .next
  stage: build
  needs: [] # see comments in win32:ci:release:build
  timeout: 2h
  rules:
    - if: $SKIP_FLAVOR_FULL != "true" && $SETUP_ONLY != "true"
  script:
    - sh ci/build-test.sh full next

# We use staging (two jobs) for Windows because without a cache
# the job will exceed 2 hours (the GitLab shared SaaS runner limit).
# Using SECONDARY_SWITCH=true is very expensive.
win32:prepare:
  extends:
    - .win32:setup-dkml
    - .next
  artifacts: {} # don't need artifacts for the prepare stage
  stage: prepare
  timeout: 2h
  script:
    - Write-Host "OCaml compiler caching complete."

win32:ci:release:build:
  extends:
    - .win32:setup-dkml
    - .release
  rules:
    - if: $SKIP_CHANNEL_RELEASE != "true" && $SKIP_CHANNEL_RELEASE_HOST_WIN32 != "true" && $SETUP_ONLY != "true"
  stage: build
  # For reasons unknown (perhaps 'needs' has bugs with parallel matrix) the
  # following does not work. So instead we can
  # 1. Place `needs: []` to move other jobs ahead rather than delay this job.
  # 2. Place other jobs in prior stages.
  # We do #1 since #2 can cause a bigger block wait for this job (because
  # more jobs are in prior stages for #2).
  # needs:
  #   - job: win32:prepare
  timeout: 2h
  script:
    - msys64\usr\bin\bash -lc "ci/build-test.sh ci release"

win32:ci:next:build:
  extends:
    - .win32:setup-dkml
    - .next
  stage: build
  timeout: 2h
  rules:
    - if: $SETUP_ONLY != "true"
  script:
    - msys64\usr\bin\bash -lc "ci/build-test.sh ci next"

win32:full:release:build:
  extends:
    - .win32:setup-dkml
    - .release
  rules:
    - if: $SKIP_CHANNEL_RELEASE != "true" && $SKIP_FLAVOR_FULL != "true" && $SKIP_CHANNEL_RELEASE_HOST_WIN32 != "true" && $SETUP_ONLY != "true"
  stage: build
  timeout: 2h
  script:
    - msys64\usr\bin\bash -lc "ci/build-test.sh full release"

win32:full:next:build:
  extends:
    - .win32:setup-dkml
    - .next
  stage: build
  timeout: 2h
  rules:
    - if: $SKIP_FLAVOR_FULL != "true" && $SETUP_ONLY != "true"
  script:
    - msys64\usr\bin\bash -lc "ci/build-test.sh full next"

# macos:ci:release:build:
#   extends:
#     - .macos:setup-dkml
#     - .release
#   stage: build
#   needs: [] # see comments in win32:ci:release:build
#   timeout: 2h
#   rules:
#     - if: $SKIP_CHANNEL_RELEASE != "true" && $SETUP_ONLY != "true"
#   script:
#     - sh ci/build-test.sh ci release

# macos:ci:next:build:
#   extends:
#     - .macos:setup-dkml
#     - .next
#   stage: build
#   needs: [] # see comments in win32:ci:release:build
#   timeout: 2h
#   rules:
#     - if: $SETUP_ONLY != "true"
#   script:
#     - sh ci/build-test.sh ci next

# macos:full:release:build:
#   extends:
#     - .macos:setup-dkml
#     - .release
#   stage: build
#   needs: [] # see comments in win32:ci:release:build
#   timeout: 2h
#   rules:
#     - if: $SKIP_CHANNEL_RELEASE != "true" && $SKIP_FLAVOR_FULL != "true" && $SETUP_ONLY != "true"
#   script:
#     - sh ci/build-test.sh full release

# macos:full:next:build:
#   extends:
#     - .macos:setup-dkml
#     - .next
#   stage: build
#   needs: [] # see comments in win32:ci:release:build
#   timeout: 2h
#   rules:
#     - if: $SKIP_FLAVOR_FULL != "true" && $SETUP_ONLY != "true"
#   script:
#     - sh ci/build-test.sh full next

release:
  stage: deploy
  image: alpine
  rules:
    - if: $SETUP_ONLY != "true"
  script:
    - apk add jq rsync curl

    # Make _release
    - ci/prepare-release.sh

    # Create public packages
    - |
      if [ -n "${CI_COMMIT_TAG:-}" ]; then
        PKGTAG=$(printf "%s" "${CI_COMMIT_TAG}" | sed 's/^v//')
      elif [ -n "${CI_COMMIT_BRANCH:-}" ]; then
        PKGTAG=$(printf "%s" "${CI_COMMIT_BRANCH}" | sed 's/^v//')
      else
        PKGTAG="${CI_COMMIT_SHORT_SHA}"
      fi
    - CI_PROJECT_PATH_URLENCODED=$(printf %s "${CI_PROJECT_PATH}" | jq -s -R -r @uri) # Must be url-encoded per https://docs.gitlab.com/ee/user/packages/generic_packages/
    - |
      GLAB_CURL_HEADER="JOB-TOKEN: ${CI_JOB_TOKEN}"
      find _release -mindepth 1 -maxdepth 1 -type d | while read -r channel; do
        channel=$(basename "${channel}")
        PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_PATH_URLENCODED}/packages/generic/${channel}/${PKGTAG}"
        echo "${PACKAGE_REGISTRY_URL}"
        find "_release/${channel}" -mindepth 1 -maxdepth 1 -type f | while read -r tarball; do
          flavor=$(basename "${tarball%.tar.gz}")
          curl --fail --header "${GLAB_CURL_HEADER}" --upload-file "_release/${channel}/${flavor}.tar.gz" "${PACKAGE_REGISTRY_URL}/${flavor}.tar.gz"
        done
      done

